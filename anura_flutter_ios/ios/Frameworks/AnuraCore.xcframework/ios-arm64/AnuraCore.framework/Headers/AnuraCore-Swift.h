#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef ANURACORE_SWIFT_H
#define ANURACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <AnuraCore/AnuraCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AnuraCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class AnuraMeasurementViewController;
@class MeasurementPayload;
@class MeasurementPipelineInfo;

/// The AnuraMeasurementDelegate protocol defines methods that allow an object to act as a delegate for the AnuraMeasurementViewController class. This protocol provides callbacks for various events that occur during the measurement process.
/// Conform to this protocol in your custom class and assign an instance of that class as the delegate of an AnuraMeasurementViewController object to receive these callbacks.
SWIFT_PROTOCOL("_TtP9AnuraCore24AnuraMeasurementDelegate_")
@protocol AnuraMeasurementDelegate
/// Notifies the delegate that the measurement controller finished loading and is ready to be displayed.
/// \param controller The <code>AnuraMeasurementViewController</code> object that finished loading.
///
- (void)anuraMeasurementControllerDidLoad:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller appeared on the screen.
/// \param controller The <code>AnuraMeasurementViewController</code> object that appeared.
///
- (void)anuraMeasurementControllerDidAppear:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller disappeared from the screen.
/// \param controller The <code>AnuraMeasurementViewController</code> object that disappeared.
///
- (void)anuraMeasurementControllerDidDisappear:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller started the camera.
/// \param controller The <code>AnuraMeasurementViewController</code> object that started the camera.
///
- (void)anuraMeasurementControllerDidStartCamera:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller stopped the camera.
/// \param controller The <code>AnuraMeasurementViewController</code> object that stopped the camera.
///
- (void)anuraMeasurementControllerDidStopCamera:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller is ready to perform measurements.
/// \param controller The <code>AnuraMeasurementViewController</code> object that is ready to measure.
///
- (void)anuraMeasurementControllerIsReadyToMeasure:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller started the measurement process.
/// \param controller The <code>AnuraMeasurementViewController</code> object that started measuring.
///
- (void)anuraMeasurementControllerDidStartMeasuring:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller finished the measurement process.
/// \param controller The <code>AnuraMeasurementViewController</code> object that finished measuring.
///
- (void)anuraMeasurementControllerDidFinishMeasuring:(AnuraMeasurementViewController * _Nonnull)controller;
/// Notifies the delegate that the measurement controller received a measurement payload.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     controller: The <code>AnuraMeasurementViewController</code> object that received the payload.
///   </li>
///   <li>
///     payload: The <code>MeasurementPayload</code> object containing the measurement data.
///   </li>
/// </ul>
- (void)anuraMeasurementControllerDidGetPayload:(AnuraMeasurementViewController * _Nonnull)controller :(MeasurementPayload * _Nonnull)payload;
/// Notifies the delegate that the measurement controller received a constraints warning.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     controller: The <code>AnuraMeasurementViewController</code> object that received the warning.
///   </li>
///   <li>
///     status: The <code>FaceConstraintsStatus</code> indicating the status of face constraints.
///   </li>
/// </ul>
- (void)anuraMeasurementControllerDidGetConstraintsWarning:(AnuraMeasurementViewController * _Nonnull)controller status:(FaceConstraintsStatus)status;
/// Notifies the delegate that the measurement process was canceled.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     controller: The <code>AnuraMeasurementViewController</code> object that canceled the measurement.
///   </li>
///   <li>
///     status: The <code>FaceConstraintsStatus</code> indicating the status of face constraints.
///   </li>
/// </ul>
- (void)anuraMeasurementControllerDidCancelMeasurement:(AnuraMeasurementViewController * _Nonnull)controller status:(FaceConstraintsStatus)status;
/// Notifies the delegate that the measurement controller updated with measurement pipeline information.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     controller: The <code>AnuraMeasurementViewController</code> object that updated.
///   </li>
///   <li>
///     info: The <code>MeasurementPipelineInfo</code> object containing the updated information.
///   </li>
/// </ul>
- (void)anuraMeasurementControllerDidUpdate:(AnuraMeasurementViewController * _Nonnull)controller info:(MeasurementPipelineInfo * _Nonnull)info;
@end

@class MeasurementConfiguration;
@class MeasurementUIConfiguration;
@protocol FaceTrackerProtocol;
@class NSCoder;
@class NSData;
@class MeasurementResults;
@class NSString;
@class UIColor;
enum CameraControlMethod : NSInteger;
@class NSBundle;

SWIFT_CLASS("_TtC9AnuraCore30AnuraMeasurementViewController")
@interface AnuraMeasurementViewController : UIViewController
@property (nonatomic, weak) id <AnuraMeasurementDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) MeasurementConfiguration * _Nonnull measurementConfiguration;
@property (nonatomic, readonly, strong) MeasurementUIConfiguration * _Nonnull uiConfiguration;
- (nonnull instancetype)initWithMeasurementConfiguration:(MeasurementConfiguration * _Nonnull)measurementConfiguration uiConfiguration:(MeasurementUIConfiguration * _Nonnull)uiConfiguration faceTracker:(id <FaceTrackerProtocol> _Nonnull)faceTracker OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
/// Start the camera and face tracker — This is called automatically when <code>AnuraMeasurementViewController</code> is loaded and when the view appears
- (void)start;
/// Stop the camera and face tracker — This is called automatically when the view is about to disappear
- (void)stop;
/// Start facial blood flow extraction if a face is detected — This is called automatically
- (void)startExtracting;
/// Stop facial blood flow extraction — This is called automatically when a measurement is cancelled
- (void)stopExtracting;
/// Restart the camera and face tracker
- (void)restart;
/// Lock the face tracker and keeps it locked until <code>unlock()</code> is called — Calling this will cancel any ongoing measurement
- (void)lock;
/// Unlock the face tracker after a delay.
/// \param delay Time interval in seconds before the face tracker is unlocked
///
- (void)unlockAfter:(NSTimeInterval)delay;
/// Decode measurement results from DeepAffex API
/// \param data Data received from DeepAffex API <code>subscribeToResults</code> endpoint
///
///
/// returns:
/// A <code>MeasurementResults</code> object if decoding succeeds. Returns <code>nil</code> if there was an error decoding the results
- (MeasurementResults * _Nullable)decodeMeasurementResultWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Sets optional properties for the measurement before it starts — This is typically used to pass user demographics with the measurement
/// \param properties A <code>[String: String]</code> dictionary with the properties
///
- (void)setMeasurementPropertiesWithProperties:(NSDictionary<NSString *, NSString *> * _Nonnull)properties;
/// Start the measurement if <code>AnuraMeasurementViewController</code> is ready to measure
- (void)startMeasurement;
/// Start the measurement if <code>AnuraMeasurementViewController</code> is ready to measure after a countdown — Countdown duration is controlled by <code>MeasurementConfiguration</code>
- (void)startMeasurementCountdown;
/// Cancel the current measurement
/// \param reason The reason why the measurement was cancelled. An appropriate status message will be displayed on the screen
///
- (void)cancelMeasurementWithReason:(FaceConstraintsStatus)reason;
/// Set the current heart rate to be displayed in the heart shape under the measurement outline
/// \param heartRate The heart rate value
///
/// \param histogramColor The colour of the histograms to transition to — Setting this to <code>nil</code> will default to <code>histogramActiveColor</code> in <code>MeasurementUIConfiguration</code>
///
- (void)setHeartRate:(double)heartRate histogramColor:(UIColor * _Nullable)histogramColor;
/// Pass the current measurement SNR (signal-to-noise ratio) — This is used to determine the quality of the measurement and it’s reflected in the lighting quality stars
/// \param snr The SNR value
///
- (void)setCurrentSNR:(double)snr;
/// Determines if the current measurement should be cancelled based on SNR and chunk order
/// \param snr The SNR value
///
/// \param chunkOrder The current chunk order of the measurement
///
///
/// returns:
/// A Boolean that determines if the measurement should be cancelled
- (BOOL)shouldCancelMeasurementWithSnr:(double)snr chunkOrder:(NSInteger)chunkOrder SWIFT_WARN_UNUSED_RESULT;
/// Enable a DeepAffex Extraction Library constraint
/// \param key The constraint key
///
- (void)enableConstraint:(NSString * _Nonnull)key;
/// Disable a DeepAffex Extraction Library constraint
/// \param key The constraint key
///
- (void)disableConstraint:(NSString * _Nonnull)key;
/// Sets the value of a DeepAffex Extraction Library constraint
/// \param key The constraint key
///
/// \param value The value of the constraint
///
- (void)setConstraintWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Set the colour of the histograms
/// \param color The colour to transition to
///
- (void)setHistogramsColorWithColor:(UIColor * _Nonnull)color;
/// Sets the next status message to be displayed below the measurement outline — The message will only appear momentarily
/// \param string The message to be displayed
///
- (void)setMessageWithString:(NSString * _Nonnull)string;
/// Sets the status message to be displayed below the measurement outline — The message will stay on the screen until <code>AnuraMeasurementViewController</code> changes state
/// \param string The message to be displayed
///
- (void)resetMessageWithString:(NSString * _Nonnull)string;
- (void)setCameraControlMethodWithMethod:(enum CameraControlMethod)method SWIFT_DEPRECATED_MSG("Experimental: Don't change the camera control method under most circumstances. Setting this to 'system' disables camera optimizations");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface AnuraMeasurementViewController (SWIFT_EXTENSION(AnuraCore))
- (void)measurementViewControllerDidCancelMeasurementWithStatus:(FaceConstraintsStatus)status;
- (void)measurementViewControllerDidLoad;
- (void)measurementViewControllerDidStartCamera;
- (void)measurementViewControllerDidStopCamera;
- (void)measurementViewControllerDidStartMeasuring;
- (void)measurementViewControllerDidFinishMeasuring;
- (void)measurementViewControllerDidGetPayload:(MeasurementPayload * _Nonnull)payload;
- (void)measurementViewControllerConstraintsWarningWithStatus:(FaceConstraintsStatus)status;
- (void)measurementViewControllerIsReadyToMeasure;
- (void)measurementViewControllerDidStartCountdown;
- (void)measurementViewControllerDidCancelCountdown;
- (void)measurementViewControllerDidFinishCountdown;
@end



SWIFT_CLASS("_TtC9AnuraCore6Camera")
@interface Camera : NSObject
@property (nonatomic) enum CameraControlMethod cameraControlMethod;
@property (nonatomic, readonly) float iso;
@property (nonatomic) float maxISO;
@property (nonatomic, readonly) float minISO;
@property (nonatomic, readonly) BOOL usingHighISO;
@property (nonatomic, readonly) BOOL usingMediumISO;
@property (nonatomic, readonly) BOOL usingLowISO;
@property (nonatomic, readonly) double exposureDuration;
@property (nonatomic, readonly) double maxExposureDuration;
@property (nonatomic, readonly) double minExposureDuration;
@property (nonatomic, readonly) float maxExposureTargetBias;
@property (nonatomic, readonly) float minExposureTargetBias;
@property (nonatomic, readonly) float exposureTargetBias;
@property (nonatomic, readonly) BOOL isAdjustingExposure;
@property (nonatomic, readonly) BOOL isAdjustingWhiteBalance;
@property (nonatomic, readonly) AVCaptureWhiteBalanceGains whiteBalanceGains;
@property (nonatomic, readonly) float maxWhiteBalanceGains;
@property (nonatomic, readonly) float minWhiteBalanceGains;
@property (nonatomic, readonly) double rgMax;
@property (nonatomic, readonly) double rgMin;
@property (nonatomic, readonly) double gbMax;
@property (nonatomic, readonly) double gbMin;
@property (nonatomic, readonly) double gMax;
@property (nonatomic, readonly) double gMin;
@property (nonatomic, readonly) double bMax;
@property (nonatomic, readonly) double bMin;
@property (nonatomic, readonly, copy) NSString * _Nonnull calibrationRegionName;
- (BOOL)setWithIso:(float)iso exposureDuration:(double)exposureDuration completion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setWithWhiteBalanceGains:(AVCaptureWhiteBalanceGains)whiteBalanceGains completion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT;
- (void)setWithExposureTargetBias:(float)exposureTargetBias;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface Camera (SWIFT_EXTENSION(AnuraCore)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didDropSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

typedef SWIFT_ENUM(NSInteger, CameraControlMethod, open) {
  CameraControlMethodAnura = 0,
  CameraControlMethodSystem = 1,
};


@class VideoFrame;
@class TrackedFace;
@protocol FaceTrackerDelegate;

SWIFT_PROTOCOL("_TtP9AnuraCore19FaceTrackerProtocol_")
@protocol FaceTrackerProtocol
- (nonnull instancetype)initWithQuality:(FaceTrackerQuality)quality;
- (void)trackFaceFrom:(VideoFrame * _Nonnull)videoFrame completion:(void (^ _Null_unspecified)(TrackedFace * _Nonnull))completion;
- (void)lock;
- (void)unlock;
- (void)reset;
@property (nonatomic) CGRect trackingBounds;
@property (nonatomic) FaceTrackerQuality quality;
@property (nonatomic, strong) id <FaceTrackerDelegate> _Nullable delegate;
@end


SWIFT_CLASS("_TtC9AnuraCore24MeasurementConfiguration")
@interface MeasurementConfiguration : NSObject
/// The default configuration that closely matches the standard Anura app from NuraLogix — Note that <code>studyFile</code> needs to be retrieved from DeepAffex API’s <code>GET /studies/sdkconfig/</code> endpoint
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MeasurementConfiguration * _Nonnull defaultConfiguration;)
+ (MeasurementConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// The legacy default configuration that closely matches the standard Anura app from NuraLogix — Note that <code>studyFile</code> needs to be retrieved from DeepAffex API’s <code>GET /studies/sdkconfig/</code> endpoint
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MeasurementConfiguration * _Nonnull defaultLegacyConfiguration;)
+ (MeasurementConfiguration * _Nonnull)defaultLegacyConfiguration SWIFT_WARN_UNUSED_RESULT;
/// The data of the study file that needs to be retrieved from DeepAffex API’s <code>GET /studies/sdkconfig/</code> endpoint
@property (nonatomic, copy) NSData * _Nonnull studyFile;
/// The duration of the measurement in seconds — Default is 30 seconds
@property (nonatomic) NSTimeInterval measurementDuration;
/// The camera position, either front camera or rear camera — Default is front
@property (nonatomic) enum AVCaptureDevicePosition cameraPosition;
/// The camera’s framerate — Default is 30 fps
@property (nonatomic) CMTime frameRate;
/// The countdown duration in seconds when when calling <code>startMeasurementCountdown()</code> in <code>AnuraMeasurementViewController</code> — Default is 3 seconds
@property (nonatomic) NSTimeInterval countdownDuration;
/// A Boolean value that determines whether the screen brightness can be adjusted to encahnce lighting quality — Default is <code>true</code>
@property (nonatomic) BOOL screenLightControlEnabled;
/// A Boolean value that determines whether the default face position and movement constraints before the measurement starts are enabled — Default is <code>true</code>
@property (nonatomic) BOOL defaultConstraintsEnabled;
/// A Boolean value that determines whether the default face position and movement constraints during the measurement are enabled — Default is <code>false</code>
@property (nonatomic) BOOL defaultConstraintsDuringMeasurementEnabled;
/// A Boolean value that determines whether the lighting quality constraint is enabled — Default is <code>false</code>
@property (nonatomic) BOOL lightingQualityConstraintEnabled;
/// The duration of a measurement chunk in seconds — Default is 5 seconds
@property (nonatomic) NSTimeInterval chunkDuration;
/// The calculated number of chunks for the whole measurement — Default is 6 chunks for a 30 second measurement with 5-second chunks
@property (nonatomic, readonly) NSInteger numChunks;
@property (nonatomic) enum CameraControlMethod cameraControlMethod SWIFT_DEPRECATED_MSG("Experimental: Don't change this property under most circumstances. Setting this to 'system' disables camera optimizations");
@property (nonatomic) BOOL faceNoneConstraintEnabled SWIFT_DEPRECATED_MSG("Experimental: Don't change this property under most circumstances. Setting this to 'false' will keep the measurement going even when a face is not detected");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC9AnuraCore23MeasurementPipelineInfo")
@interface MeasurementPipelineInfo : NSObject
@property (nonatomic, readonly) NSInteger currentLightingQuality;
@property (nonatomic, readonly) NSInteger overallLightingQuality;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Error;
@class SignalResult;

SWIFT_CLASS("_TtC9AnuraCore18MeasurementResults")
@interface MeasurementResults : NSObject
/// The measurement ID of the current results
@property (nonatomic, readonly, copy) NSString * _Nonnull measurementID;
/// An error object for the current results — If there no errors, the <code>code</code> property is equal to <code>OK</code>
@property (nonatomic, readonly, strong) Error * _Nullable error;
/// The status of the measurement. This property is only available in the last chunk.
/// For a list of statuses, refer to https://dfxapiversion10.docs.apiary.io/#reference/0/measurements/list
@property (nonatomic, readonly, copy) NSString * _Nullable statusID;
/// All the current results for each signal ID in a <code>[String: Double]</code> dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull allResultsValues;
/// All the current results for each signal ID in a <code>[String: SignalResult]</code> dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, SignalResult *> * _Nonnull allResults;
/// The chunk order of the current results — For a 30-second measurements with 5-second chunks, there are 6 chunks in total
@property (nonatomic, readonly) NSInteger chunkOrder;
/// The current signal-to-noise of the measurement — Equivalent to calling <code>result(for: "SNR")</code>
@property (nonatomic, readonly) double snr;
/// The current heart rate result — Equivalent to calling <code>result(for: "HR_BPM")</code>
@property (nonatomic, readonly) double heartRate;
/// A boolean value for whether or not the signal-to-noise ratio (SNR) of the measurement is good so far
/// If <code>isSNRGood</code> for the last chunk of the measurement is <code>false</code>, then no results will be available
@property (nonatomic, readonly) BOOL isSNRGood;
/// A boolean value for whether or not there were errors encountered during measurement results computation on the Cloud
@property (nonatomic, readonly) BOOL hasErrors;
/// A boolean value for whether or not the Cloud has successfully computed all the expected measurement results
@property (nonatomic, readonly) BOOL isComplete;
/// Returns the current measurement result for a signal ID
/// \param signalID A String value of the signal ID
///
///
/// returns:
/// A Double value of the result. If the provided signal ID doesn’t have a result, it returns <code>Double.nan</code>
- (double)resultFor:(NSString * _Nonnull)signalID SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of notes that provide additional information about the measurement results computation on the Cloud
/// For more information on these notes, refer to https://dfxapiversion10.docs.apiary.io/#reference/0/measurements/subscribe-to-results
/// \param signalID A String value of the signal ID
///
///
/// returns:
/// A list of notes as a  <code>[String]</code> value. If the provided signal ID doesn’t have any notes or if there are no computed results, it returns an empty array
- (NSArray<NSString *> * _Nonnull)notesFor:(NSString * _Nonnull)signalID SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of error messages that provide additional information about any errors encountered during measurement results compuration on the Cloud
/// \param signalID A String value of the signal ID
///
///
/// returns:
/// A list of error messages as a  <code>[String]</code> value. If the provided signal ID doesn’t have any error messages or if there are no computed results, it returns an empty array
- (NSArray<NSString *> * _Nonnull)errorsFor:(NSString * _Nonnull)signalID SWIFT_WARN_UNUSED_RESULT;
@end

@class UIFont;
@class UIImage;
@class NSLocale;

SWIFT_CLASS("_TtC9AnuraCore26MeasurementUIConfiguration")
@interface MeasurementUIConfiguration : NSObject
/// The default configuration that closely matches the appearance of the standard Anura app from NuraLogix
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MeasurementUIConfiguration * _Nonnull defaultConfiguration;)
+ (MeasurementUIConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// The default configuration that closely matches the legacy appearance of the standard Anura app from NuraLogix
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MeasurementUIConfiguration * _Nonnull defaultLegacyConfiguration;)
+ (MeasurementUIConfiguration * _Nonnull)defaultLegacyConfiguration SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value that determines whether to show the heart rate during the measurement
@property (nonatomic) BOOL showHeartRateDuringMeasurement;
/// The background colour of the heart shape that appears below the measurement outline — Default is a red colour
@property (nonatomic, strong) UIColor * _Nonnull heartRateShapeColor;
/// The text colour of the heart rate value inside the heart shape — Default is white
@property (nonatomic, strong) UIColor * _Nonnull heartRateTextColor;
/// The text shadow colour of the heart rate value inside the heart shape — Default is black
@property (nonatomic, strong) UIColor * _Nonnull heartRateTextShadowColor;
/// The font of the heart rate value inside the heart shape — Default is a bold system font of size 22pt
@property (nonatomic, strong) UIFont * _Nonnull heartRateFont;
/// An optional image of the heart shape. Setting it to <code>nil</code> defaults to a simple heart shape
@property (nonatomic, strong) UIImage * _Nullable heartRateImage;
/// A Boolean value that determines whether to animate the heart image when results are available — Default is <code>false</code>
@property (nonatomic) BOOL animateHeartRateImage;
/// A Boolean value that determines whether to show the the 4 histograms that appear outside the measurement outline — Default is <code>false</code>
@property (nonatomic) BOOL showHistograms;
/// The colour of the histograms when the heart rate is detected — Default is a red colour
@property (nonatomic, strong) UIColor * _Nonnull histogramActiveColor;
/// The colour of the histograms before a heart rate is detected — Default is light gray
@property (nonatomic, strong) UIColor * _Nonnull histogramInactiveColor;
/// A Boolean value that determines whether to show status messages that appear below the measurement outline — Default is <code>true</code>
@property (nonatomic) BOOL showStatusMessages;
/// A Boolean value that determines whether to show the “Measurement Started” message that appears at the bottom of the screen when the measurement starts — Default is <code>true</code>
@property (nonatomic) BOOL showMeasurementStartedMessage;
/// A Boolean value that determines whether to show the “3…2…1…” countdown just before the measurement starts when calling <code>startMeasurementCountdown()</code> in <code>AnuraMeasurementViewController</code>
@property (nonatomic) BOOL showCountdown;
/// The text colour of status messages — Default navy blue
@property (nonatomic, strong) UIColor * _Nonnull statusMessagesTextColor;
/// The text shadow colour of status messages — Default is black
@property (nonatomic, strong) UIColor * _Nonnull statusMessagesTextShadowColor;
/// The font of status messages — Default is bold system font of size 20pt
@property (nonatomic, strong) UIFont * _Nonnull statusMessagesFont;
/// The font of the “3…2…1…” countdown — Default is a system font of size 65pt
@property (nonatomic, strong) UIFont * _Nonnull countdownFont;
/// A Boolean value that determines whether to show the measurement overlay, including the background and the measurement outline — Default is <code>true</code>
@property (nonatomic) BOOL showOverlay;
/// A Boolean value that determines whether to show the circular measurement outline, including the timer that appears during the measurement — Default is <code>true</code>
@property (nonatomic) BOOL showMeasurementOutline;
/// An optional image for the logo that appears at the top of the screen above the measurement outline — Setting it to <code>nil</code> hides the logo
@property (nonatomic, strong) UIImage * _Nullable logoImage;
/// The background colour of the overlay — Default is white
@property (nonatomic, strong) UIColor * _Nonnull overlayBackgroundColor;
/// The colour of the measurement outline in its default state when no face is detected — Default navy blue
@property (nonatomic, strong) UIColor * _Nonnull measurementOutlineInactiveColor;
/// The colour of the measurement outline in its active state when a face is detected and during the measurement — Default is a green colour
@property (nonatomic, strong) UIColor * _Nonnull measurementOutlineActiveColor;
/// The text colour of the measurement timer that appears inside the circle that goes around the measurement outline — Default is a dark grey colour
@property (nonatomic, strong) UIColor * _Nonnull timerTextColor;
/// The font of the measurement timer that appears inside the circle that goes around the measurement outline — Default is a bold system font of size 11
@property (nonatomic, strong) UIFont * _Nonnull timerFont;
/// A Boolean value that determines whether to show lighting quality stars — Default is <code>true</code>
@property (nonatomic) BOOL showLightingQualityStars;
/// The background colour of a filled lighting quality star — Default is a green colour
@property (nonatomic, strong) UIColor * _Nonnull lightingQualityStarsActiveColor;
/// The outline colour of an empty lighting quality star — Default is a navy blue outline
@property (nonatomic, strong) UIColor * _Nonnull lightingQualityStarsInactiveColor;
/// An optional image of a filled lighting quality star. Setting it to <code>nil</code> defaults to a star shape
@property (nonatomic, strong) UIImage * _Nullable lightingQualityStarsFilledImage;
/// An optional image of an empty lighting quality star. Setting it to <code>nil</code> defaults to a star shape
@property (nonatomic, strong) UIImage * _Nullable lightingQualityStarsEmptyImage;
/// The locale setting of the measurement screen. Changing this to a specific locale (e.g. <code>Locale(identifier: "fr")</code> will change the interface language. Default is <code>.autoupdatingCurrent</code>
@property (nonatomic, copy) NSLocale * _Nonnull locale;
@property (nonatomic) BOOL showFacePolygons SWIFT_DEPRECATED_MSG("No longer available");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MediaPipeFaceTracker (SWIFT_EXTENSION(AnuraCore)) <FaceTrackerProtocol>
@end











#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
